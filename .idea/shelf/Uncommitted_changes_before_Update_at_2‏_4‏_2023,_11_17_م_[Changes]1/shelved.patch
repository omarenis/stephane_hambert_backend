Index: crm/views.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.shortcuts import render\n\n# Create your views here.\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/crm/views.py b/crm/views.py
--- a/crm/views.py	
+++ b/crm/views.py	
@@ -1,3 +1,19 @@
-from django.shortcuts import render
+from common.views import ViewSet, extract_get_data, extract_serialized_objects_response
+from crm.models import UserSerializer
+from crm.services import CustomerService
+from django.urls import path
+
 
 # Create your views here.
+class CustomerViewSet(ViewSet):
+
+    def __init__(self, serializer_class=UserSerializer, service=CustomerService(), **kwargs):
+        super().__init__(serializer_class, service, **kwargs)
+
+
+customers, customer = CustomerViewSet.get_urls()
+
+urlpatterns = [
+    path('customers', customers),
+    path('customers/<int:pk>', customer)
+]
Index: auth_module/views.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.shortcuts import render\n\n# Create your views here.\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/auth_module/views.py b/auth_module/views.py
--- a/auth_module/views.py	
+++ b/auth_module/views.py	
@@ -1,3 +1,83 @@
-from django.shortcuts import render
+from .services import login, find_user_by_username_or_email, send_code, verify_code, signup
+from rest_framework.decorators import api_view, permission_classes
+from django.views.decorators.csrf import csrf_exempt
+from rest_framework.permissions import AllowAny
+from rest_framework_simplejwt.tokens import RefreshToken
+from rest_framework.response import Response
+from rest_framework.status import HTTP_400_BAD_REQUEST, HTTP_404_NOT_FOUND, HTTP_500_INTERNAL_SERVER_ERROR, \
+    HTTP_204_NO_CONTENT, HTTP_200_OK, HTTP_401_UNAUTHORIZED
+from django.contrib.auth.models import User
+from crm.services import CustomerService
+from django.urls import path
+
+
+def generate_token_for_user(user):
+    token = RefreshToken.for_user(user=user)
+    return Response(data={
+        "access": str(token.access_token),
+        "refresh": str(token),
+        "userId": user.id,
+        "first_name": user.first_name,
+        "last_name": user.last_name,
+        "is_superuser": user.is_superuser
+    }, status=HTTP_200_OK)
+
 
 # Create your views here.
+@api_view(['POST'])
+@csrf_exempt
+@permission_classes([AllowAny])
+def login_view(request, *args, **kwargs):
+    try:
+        user = login({
+            'username': request.data.get('username'),
+            'password': request.data.get('password')
+        })
+        if user.customerprofile.has_two_factors_authentication:
+            send_code(user.email)
+            return Response(data={}, status=HTTP_200_OK)
+        return generate_token_for_user(user)
+    except (ValueError, User.DoesNotExist) as valueError:
+        status = HTTP_404_NOT_FOUND if isinstance(valueError, User.DoesNotExist) else HTTP_400_BAD_REQUEST
+        return Response(data={'message': str(valueError)}, status=status)
+
+
+@csrf_exempt
+@api_view(['POST'])
+def verify_code_view(request, *args, **kwargs):
+    try:
+        verify_code(request.data.get('email'), int(request.data.get('code')))
+        user = User.objects.find(email=request.data.get('email'))
+        return generate_token_for_user(user)
+    except Exception as exception:
+        if isinstance(exception, ValueError):
+            return Response(data={'message': 'wrong code'}, status=HTTP_401_UNAUTHORIZED)
+        return Response(data={'message': str(exception)}, status=HTTP_500_INTERNAL_SERVER_ERROR)
+
+
+@csrf_exempt
+@api_view(['POST'])
+def signup_view(request, *args, **kwargs):
+    try:
+        signup({
+            'username': request.data.get('username'),
+            'first_name': request.data.get('first_name'),
+            'last_name': request.data.get('last_name'),
+            'email': request.data.get('email'),
+            'password': request.data.get('password'),
+            'facebook': request.data.get('facebook'),
+            'google': request.data.get('google'),
+            'phone': request.data.get('phone')
+        })
+        return Response(status=HTTP_204_NO_CONTENT)
+    except Exception as exception:
+        if isinstance(exception, ValueError):
+            return Response(data={'message': 'account already found'}, status=HTTP_400_BAD_REQUEST)
+        return Response(data={'message': str(exception)}, status=HTTP_500_INTERNAL_SERVER_ERROR)
+
+
+urlpatterns = [
+    path('login', login_view),
+    path('signup', signup_view),
+    path('verify_code', verify_code_view)
+]
Index: auth_module/tests.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import json\nimport requests\nfrom django.test import TestCase\nfrom authlib.oauth1.client import OAuth1Client\n\nfrom auth_module.services import send_code, verify_code\nfrom backend.settings import CLIEND_ID, CLIENT_SECRET\n\n\n# Create your tests here.\nclass AuthTest(TestCase):\n\n    def setUp(self) -> None:\n        self.valid_email = 'omartriki712@gmail.com'\n        self.invalid_email  = 'omar@example.com'\n\n    def test_reset_password(self):\n\n        response = send_code(email=self.valid_email)\n        print(type(response))\n\n    def test_verify_code(self):\n        response = verify_code(email=self.valid_email, code=984820)\n        print(response.text)\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/auth_module/tests.py b/auth_module/tests.py
--- a/auth_module/tests.py	
+++ b/auth_module/tests.py	
@@ -3,7 +3,7 @@
 from django.test import TestCase
 from authlib.oauth1.client import OAuth1Client
 
-from auth_module.services import send_code, verify_code
+from auth_module.services import send_code, verify_code, signup
 from backend.settings import CLIEND_ID, CLIENT_SECRET
 
 
@@ -12,13 +12,26 @@
 
     def setUp(self) -> None:
         self.valid_email = 'omartriki712@gmail.com'
-        self.invalid_email  = 'omar@example.com'
+        self.invalid_email = 'omar@example.com'
 
     def test_reset_password(self):
-
         response = send_code(email=self.valid_email)
         print(type(response))
 
     def test_verify_code(self):
         response = verify_code(email=self.valid_email, code=984820)
         print(response.text)
+
+    def test_signup(self):
+        data = {
+            "username": "@omartriki712",
+            "email": "omartriki712@gmail.com",
+            "password": "omartriki712@+=",
+            "first_name": "triki",
+            "last_name": "omar",
+            "facebook": None,
+            "google": "omartriki712@gmail.com",
+            "phone": "+21624127616"
+        }
+        user = signup(data=data)
+
Index: auth_module/services.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import json\n\nfrom django.contrib.auth.models import User\nfrom requests import post\nfrom rest_framework.status import HTTP_200_OK\nfrom backend.settings import CLIEND_ID, CLIENT_SECRET, DOMAIN\nfrom django.core.validators import validate_email, ValidationError\n\n# def login(data: dict):\n#     user = User.objects.get(email=data.get('email'))\n#     if user.is_superuser is False:\n#\n\ndef send_code(email):\n    response = post(f\"{DOMAIN}/passwordless/start\", data={\n        'client_id': CLIEND_ID,\n        'client_secret': CLIENT_SECRET,\n        'connection': 'email',\n        'send': 'code',\n        'email': email\n    })\n    if response.status_code == HTTP_200_OK:\n        return json.loads(response.text)\n    raise Exception('bad request or invalid code')\n\n\ndef verify_code(email, code):\n    response = json.loads(post(f'{DOMAIN}/oauth/token', data={\n        \"grant_type\": \"http://auth0.com/oauth/grant-type/passwordless/otp\",\n        'client_id': CLIEND_ID,\n        'client_secret': CLIENT_SECRET,\n        'otp': code,\n        'realm': 'email',\n        'username': email\n    }).text)\n    if response.get('access_token') is None:\n        raise ValueError(response.get('message'))\n    return response\n\n\ndef find_user_by_username(data):\n    try:\n        validate_email(data.get('username'))\n        data['email'] = data.pop('username')\n    except ValidationError:\n        pass\n\n    try:\n        return User.objects.get(**data)\n    except User.DoesNotExist:\n        return None\n\ndef login(data):\n    user = find_user_by_username({'username': data.get('username')})\n    if user is None:\n        user = User()\n        user.first_name = data.get('first_name')\n        user.last_name = data.get('last_name')\n        user.phone = data.get('phone')\n\n    password = data.pop('password')\n    try:\n        validate_email(data.get('username'))\n        data['email'] = data.pop('username')\n    except ValidationError:\n        pass\n\n    try:\n        user = User.objects.get(**data)\n        if user.check_password(password):\n            return user\n        raise ValueError('password did not match')\n    except User.DoesNotExist:\n        raise ValueError('user with username or email not found')\n\n\ndef signup(data: dict):\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/auth_module/services.py b/auth_module/services.py
--- a/auth_module/services.py	
+++ b/auth_module/services.py	
@@ -5,12 +5,14 @@
 from rest_framework.status import HTTP_200_OK
 from backend.settings import CLIEND_ID, CLIENT_SECRET, DOMAIN
 from django.core.validators import validate_email, ValidationError
+from crm.services import CustomerService
 
 # def login(data: dict):
 #     user = User.objects.get(email=data.get('email'))
 #     if user.is_superuser is False:
 #
 
+
 def send_code(email):
     response = post(f"{DOMAIN}/passwordless/start", data={
         'client_id': CLIEND_ID,
@@ -21,24 +23,10 @@
     })
     if response.status_code == HTTP_200_OK:
         return json.loads(response.text)
-    raise Exception('bad request or invalid code')
-
+    raise ValidationError('bad email or service corrupted, please check your email first')
 
-def verify_code(email, code):
-    response = json.loads(post(f'{DOMAIN}/oauth/token', data={
-        "grant_type": "http://auth0.com/oauth/grant-type/passwordless/otp",
-        'client_id': CLIEND_ID,
-        'client_secret': CLIENT_SECRET,
-        'otp': code,
-        'realm': 'email',
-        'username': email
-    }).text)
-    if response.get('access_token') is None:
-        raise ValueError(response.get('message'))
-    return response
 
-
-def find_user_by_username(data):
+def find_user_by_username_or_email(data):
     try:
         validate_email(data.get('username'))
         data['email'] = data.pop('username')
@@ -50,28 +38,43 @@
     except User.DoesNotExist:
         return None
 
-def login(data):
-    user = find_user_by_username({'username': data.get('username')})
-    if user is None:
-        user = User()
-        user.first_name = data.get('first_name')
-        user.last_name = data.get('last_name')
-        user.phone = data.get('phone')
 
+def login(data: dict):
     password = data.pop('password')
     try:
         validate_email(data.get('username'))
         data['email'] = data.pop('username')
     except ValidationError:
         pass
-
     try:
         user = User.objects.get(**data)
         if user.check_password(password):
             return user
         raise ValueError('password did not match')
     except User.DoesNotExist:
-        raise ValueError('user with username or email not found')
+        raise User.DoesNotExist('user with username or email not found')
 
 
 def signup(data: dict):
+    user = find_user_by_username_or_email({'username': data.get('username')})
+    if user is None:
+        user = CustomerService().create(data=data)
+        send_code(user.email)
+    else:
+        raise ValueError('user with username or email exists')
+    return user
+
+
+def verify_code(email, code):
+    response = json.loads(post(f'{DOMAIN}/oauth/token', data={
+        "grant_type": "http://auth0.com/oauth/grant-type/passwordless/otp",
+        'client_id': CLIEND_ID,
+        'client_secret': CLIENT_SECRET,
+        'otp': code,
+        'realm': 'email',
+        'username': email
+    }).text)
+    print(response)
+    if response.get('error') is not None:
+        raise ValueError(response.get('error_description'))
+    return response
Index: backend/urls.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"\"\"backend URL Configuration\n\nThe `urlpatterns` list routes URLs to views. For more information please see:\n    https://docs.djangoproject.com/en/4.1/topics/http/urls/\nExamples:\nFunction views\n    1. Add an import:  from my_app import views\n    2. Add a URL to urlpatterns:  path('', views.home, name='home')\nClass-based views\n    1. Add an import:  from other_app.views import Home\n    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')\nIncluding another URLconf\n    1. Import the include() function: from django.urls import include, path\n    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))\n\"\"\"\nfrom django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('api/', include('stock_management.views'))\n]\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/urls.py b/backend/urls.py
--- a/backend/urls.py	
+++ b/backend/urls.py	
@@ -18,5 +18,7 @@
 
 urlpatterns = [
     path('admin/', admin.site.urls),
-    path('api/', include('stock_management.views'))
+    path('api/', include('stock_management.views')),
+    path('api/auth/', include('auth_module.views')),
+    path('api/', include('crm.views'))
 ]
Index: backend/settings.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"\"\"\nDjango settings for backend project.\n\nGenerated by 'django-admin startproject' using Django 4.1.5.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/4.1/topics/settings/\n\nFor the full list of settings and their values, see\nhttps://docs.djangoproject.com/en/4.1/ref/settings/\n\"\"\"\nimport os\nfrom pathlib import Path\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-h2h0u0w@h&&ch)@8g&h0-=(@^&ta8glmv&c!znw&wmi+gp49i!'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = [\"*\"]\n\nCORS_ALLOW_METHODS = [\n    \"DELETE\",\n    \"GET\",\n    \"POST\",\n    \"PUT\",\n]\n\nCORS_ALLOW_ALL_ORIGINS = True\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'corsheaders',\n    'rest_framework',\n    'rest_framework_simplejwt',\n    'rest_framework_simplejwt.token_blacklist',\n    'stock_management',\n    'auth_module',\n    'crm'\n]\n\nDOMAIN = 'https://dev-r2k0w0yq8vtxnpz2.us.auth0.com'\nCLIEND_ID = 'dnxV2sjpZD726SwtJQVdUSf6C247BkBC'\nCLIENT_SECRET = 'YPqapxKbIn6aEhCKwigqKj3igFCrvPpX6fj5wG_beU1S1-Fu-X9p9SglK_L7JY3c'\n\nMIDDLEWARE = [\n    'corsheaders.middleware.CorsMiddleware',\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'backend.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'backend.wsgi.application'\n\n# Database\n# https://docs.djangoproject.com/en/4.1/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n# Password validation\n# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth_module.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth_module.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth_module.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth_module.password_validation.NumericPasswordValidator',\n    },\n]\n\n# Internationalization\n# https://docs.djangoproject.com/en/4.1/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.1/howto/static-files/\n\nSTATIC_URL = 'static/'\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/settings.py b/backend/settings.py
--- a/backend/settings.py	
+++ b/backend/settings.py	
@@ -102,16 +102,16 @@
 
 AUTH_PASSWORD_VALIDATORS = [
     {
-        'NAME': 'django.contrib.auth_module.password_validation.UserAttributeSimilarityValidator',
+        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
     },
     {
-        'NAME': 'django.contrib.auth_module.password_validation.MinimumLengthValidator',
+        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
     },
     {
-        'NAME': 'django.contrib.auth_module.password_validation.CommonPasswordValidator',
+        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
     },
     {
-        'NAME': 'django.contrib.auth_module.password_validation.NumericPasswordValidator',
+        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
     },
 ]
 
Index: auth_module/models.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.db import models\n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/auth_module/models.py b/auth_module/models.py
--- a/auth_module/models.py	
+++ b/auth_module/models.py	
@@ -1,3 +1,0 @@
-from django.db import models
-
-
Index: crm/models.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.contrib.auth.models import User\nfrom django.db import models\nfrom django.db.models import Model, URLField, CharField, OneToOneField, CASCADE, BooleanField\nfrom rest_framework.serializers import ModelSerializer\n\n\nclass CustomerProfile(Model):\n\n    AUTH_FACTOR_METHODS = (('email', 'email'), ('phone', 'phone'))\n\n    facebook = URLField()\n    google = URLField()\n    phone = CharField(max_length=25)\n    user = OneToOneField(to=User, on_delete=CASCADE, null=False)\n\n    class Meta:\n        db_table = 'customers'\n\n\nclass UserSerializer(ModelSerializer):\n    class Meta:\n        model = User\n        fields = '__all__'\n\n\nclass CustomerSerialize(ModelSerializer):\n    user = UserSerializer(read_only=True)\n\n    class Meta:\n        model = CustomerProfile\n        fields = '__all__'\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/crm/models.py b/crm/models.py
--- a/crm/models.py	
+++ b/crm/models.py	
@@ -1,31 +1,33 @@
 from django.contrib.auth.models import User
 from django.db import models
-from django.db.models import Model, URLField, CharField, OneToOneField, CASCADE, BooleanField
+from django.db.models import Model, URLField, CharField, OneToOneField, CASCADE, BooleanField, BigIntegerField, \
+    FloatField, TextField
 from rest_framework.serializers import ModelSerializer
 
 
 class CustomerProfile(Model):
-
-    AUTH_FACTOR_METHODS = (('email', 'email'), ('phone', 'phone'))
-
-    facebook = URLField()
-    google = URLField()
+    facebook = URLField(null=True)
+    google = URLField(null=True)
     phone = CharField(max_length=25)
+    gender = TextField(null=False, choices=(('male', 'male'), ('female', 'female')))
+    has_two_factors_authentication = BooleanField(null=False, default=False)
     user = OneToOneField(to=User, on_delete=CASCADE, null=False)
+    number_purchases = BigIntegerField(null=False, default=0)
+    total_sales = FloatField(null=False, default=0.0)
 
     class Meta:
         db_table = 'customers'
 
 
+class CustomerProfileSerializer(ModelSerializer):
+    class Meta:
+        model = CustomerProfile
+        exclude = ['user']
+
+
 class UserSerializer(ModelSerializer):
+    customerprofile = CustomerProfileSerializer(read_only=True)
+
     class Meta:
         model = User
-        fields = '__all__'
-
-
-class CustomerSerialize(ModelSerializer):
-    user = UserSerializer(read_only=True)
-
-    class Meta:
-        model = CustomerProfile
-        fields = '__all__'
+        exclude = ('password',)
Index: common/services.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from .repositories import Repository\n\n\nclass Service(object):\n\n    def __init__(self, repository: Repository, fields: dict):\n        self.repository = repository\n        self.fields = fields\n\n    def list(self):\n        return self.repository.list()\n\n    def retrieve(self, _id: int):\n        return self.repository.retrieve(_id=_id)\n\n    def create(self, data: dict):\n        for i in self.fields:\n            if data.get(i) is None and self.fields[i].get('required') is True:\n                return ValueError(f'{i} must not be null')\n            if data.get(i) is not None and self.fields.get(i).get('type') == 'foreign_key':\n                data[f'{i}_id'] = data.pop(i)\n        return self.repository.create(data)\n\n    def put(self, _id: int, data: dict):\n        return self.repository.put(_id=_id, data=data)\n\n    def delete(self, _id: int):\n        return self.repository.delete(_id)\n\n    def filter_by(self, data: dict):\n        filter_params = {}\n        for i in data:\n            if self.fields.get(i) is not None and self.fields.get(i).get('type') == 'text':\n                filter_params[f'{i}__contains'] = data[i]\n            filter_params[i] = data[i]\n        return self.repository.filter_by(data=filter_params)\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/common/services.py b/common/services.py
--- a/common/services.py	
+++ b/common/services.py	
@@ -3,6 +3,13 @@
 
 class Service(object):
 
+    def verify_required_data(self, data: dict):
+        for i in self.fields:
+            if data.get(i) is None and self.fields[i].get('required') is True:
+                return ValueError(f'{i} must not be null')
+            if data.get(i) is not None and self.fields.get(i).get('type') == 'foreign_key':
+                data[f'{i}_id'] = data.pop(i)
+
     def __init__(self, repository: Repository, fields: dict):
         self.repository = repository
         self.fields = fields
@@ -14,11 +21,7 @@
         return self.repository.retrieve(_id=_id)
 
     def create(self, data: dict):
-        for i in self.fields:
-            if data.get(i) is None and self.fields[i].get('required') is True:
-                return ValueError(f'{i} must not be null')
-            if data.get(i) is not None and self.fields.get(i).get('type') == 'foreign_key':
-                data[f'{i}_id'] = data.pop(i)
+        self.verify_required_data(data)
         return self.repository.create(data)
 
     def put(self, _id: int, data: dict):
Index: .idea/sonarlint/securityhotspotstore/index.pb
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\n;\n\u000Bcrm/apps.py\u0012,d/0/d0e678652a66dec0145a11a4c2b2e2a1181436a4\n?\n\u000Fcommon/tests.py\u0012,5/9/591ae9cb7b67faf9b030b21fcc2371e362b700f4\nI\n\u0019stock_management/tests.py\u0012,e/6/e647b661c076f7b25ced4c715ea9c9e135ceb1bc\n<\n\fcrm/tests.py\u0012,e/d/edd82206712d93edccbb93d07ebe9f2972c575e8\nC\n\u0013auth_module/apps.py\u0012,a/d/ad90dd7ea4aab818ed8e71c8bee169b4311c718a\n<\n\fcrm/admin.py\u0012,e/e/eecaec416f483f5dc34225d3d33e315546ea6fad\n@\n\u0010requirements.txt\u0012,1/9/19359a61ae2446b51b549167b014da2fcf265768\nD\n\u0014auth_module/views.py\u0012,5/1/51adbe817d9adeed0b657f9d1f51540aec6f5c0a\nJ\n\u001Astock_management/models.py\u0012,6/2/62361466e69bcb03c64af6c56afd53b0a28aa892\nC\n\u0013backend/settings.py\u0012,e/3/e3b66993770b8bd17727389114408abe2710d4f6\nD\n\u0014auth_module/tests.py\u0012,6/7/67f3a346e6d642c29950494dc412ecdf3186c7c9\nE\n\u0015auth_module/models.py\u0012,1/a/1a1b9c1cd20e92033586640f036b53d59e4466c9\nG\n\u0017auth_module/services.py\u0012,a/9/a9796ce208fcd2853957504c106d119b7d26b957\n<\n\fcrm/views.py\u0012,b/6/b6296b3ea1479edb29e44b64ae39f6586328b599\nC\n\u0013ecommerce/models.py\u0012,b/8/b8b73344c1e806d65505fc3cb0ee8a24fc6f523e\nB\n\u0012common/services.py\u0012,1/3/13442ff2c318f6c4daec6494e860f32f8de076cf\nI\n\u0019stock_management/views.py\u0012,3/f/3f8e2abb50a95ecb7fa85ebb904b61b8c2f39003\n?\n\u000Fbackend/urls.py\u0012,e/8/e86ee5a9c15adf9e0f1eef0379032fc6cd65bd41\n=\n\rcrm/models.py\u0012,d/5/d5e8c8f6fb49f71ac683643a89cba8f1ee709e3d\n?\n\u000Fcommon/views.py\u0012,a/2/a2027c4c3af278934dafdb4a641e3f65e648e9d1\nL\n\u001Cstock_management/services.py\u0012,9/f/9f865b87488f50a77d0620d5b589da8154522635\nF\n\u0016common/repositories.py\u0012,0/b/0bf8f17c16d32aa550fc5bcd9e35d381eef009b3\n:\n\n.gitignore\u0012,a/5/a5cc2925ca8258af241be7e5b0381edf30266302
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/sonarlint/securityhotspotstore/index.pb b/.idea/sonarlint/securityhotspotstore/index.pb
--- a/.idea/sonarlint/securityhotspotstore/index.pb	
+++ b/.idea/sonarlint/securityhotspotstore/index.pb	
@@ -1,49 +1,30 @@
 
 ;
 crm/apps.py,d/0/d0e678652a66dec0145a11a4c2b2e2a1181436a4
-?
-common/tests.py,5/9/591ae9cb7b67faf9b030b21fcc2371e362b700f4
 I
 stock_management/tests.py,e/6/e647b661c076f7b25ced4c715ea9c9e135ceb1bc
-<
-crm/tests.py,e/d/edd82206712d93edccbb93d07ebe9f2972c575e8
 C
 auth_module/apps.py,a/d/ad90dd7ea4aab818ed8e71c8bee169b4311c718a
 <
 crm/admin.py,e/e/eecaec416f483f5dc34225d3d33e315546ea6fad
 @
 requirements.txt,1/9/19359a61ae2446b51b549167b014da2fcf265768
-D
-auth_module/views.py,5/1/51adbe817d9adeed0b657f9d1f51540aec6f5c0a
 J
 stock_management/models.py,6/2/62361466e69bcb03c64af6c56afd53b0a28aa892
-C
-backend/settings.py,e/3/e3b66993770b8bd17727389114408abe2710d4f6
+L
+stock_management/services.py,9/f/9f865b87488f50a77d0620d5b589da8154522635
+:
+
+.gitignore,a/5/a5cc2925ca8258af241be7e5b0381edf30266302
 D
-auth_module/tests.py,6/7/67f3a346e6d642c29950494dc412ecdf3186c7c9
-E
-auth_module/models.py,1/a/1a1b9c1cd20e92033586640f036b53d59e4466c9
-G
-auth_module/services.py,a/9/a9796ce208fcd2853957504c106d119b7d26b957
-<
-crm/views.py,b/6/b6296b3ea1479edb29e44b64ae39f6586328b599
-C
-ecommerce/models.py,b/8/b8b73344c1e806d65505fc3cb0ee8a24fc6f523e
-B
-common/services.py,1/3/13442ff2c318f6c4daec6494e860f32f8de076cf
+auth_module/admin.py,8/a/8aec7d4b1138f6d9156cb756775d72d72de618fe
+N
+crm/migrations/0001_initial.py,d/9/d98382f31fcb3169df9a9378eb81d81fc08d1bd1
 I
 stock_management/views.py,3/f/3f8e2abb50a95ecb7fa85ebb904b61b8c2f39003
 ?
-backend/urls.py,e/8/e86ee5a9c15adf9e0f1eef0379032fc6cd65bd41
-=
-
-crm/models.py,d/5/d5e8c8f6fb49f71ac683643a89cba8f1ee709e3d
-?
 common/views.py,a/2/a2027c4c3af278934dafdb4a641e3f65e648e9d1
-L
-stock_management/services.py,9/f/9f865b87488f50a77d0620d5b589da8154522635
-F
-common/repositories.py,0/b/0bf8f17c16d32aa550fc5bcd9e35d381eef009b3
-:
-
-.gitignore,a/5/a5cc2925ca8258af241be7e5b0381edf30266302
\ No newline at end of file
+B
+common/services.py,1/3/13442ff2c318f6c4daec6494e860f32f8de076cf
+<
+crm/tests.py,e/d/edd82206712d93edccbb93d07ebe9f2972c575e8
\ No newline at end of file
Index: crm/tests.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.test import TestCase\n\n# Create your tests here.\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/crm/tests.py b/crm/tests.py
--- a/crm/tests.py	
+++ b/crm/tests.py	
@@ -1,3 +1,28 @@
 from django.test import TestCase
+from django.contrib.auth.models import User
+from crm.models import UserSerializer, CustomerSerializer
+from crm.services import CustomerService
+
+
+class CustomerServiceTestCase(TestCase):
+
+    def setUp(self) -> None:
+        self.customerService = CustomerService()
+        self.user_serializer = UserSerializer
+        self.customer_serializer = CustomerSerializer
 
-# Create your tests here.
+    def test_create_customer(self):
+        data = {
+            'username': 'omar',
+            'email': 'omartriki712@gmail.com',
+            'password': 'omar1996@+=',
+            'first_name': 'omar',
+            'last_name': 'triki',
+            'phone': '+21624127616',
+            'facebook': None,
+            'google': None,
+        }
+
+        user = self.customerService.create(data)
+        print(self.customer_serializer(user.customerprofile).data)
+        self.assertIsInstance(user, User)
Index: .idea/sonarlint/issuestore/index.pb
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\n;\n\u000Bcrm/apps.py\u0012,d/0/d0e678652a66dec0145a11a4c2b2e2a1181436a4\n?\n\u000Fcommon/tests.py\u0012,5/9/591ae9cb7b67faf9b030b21fcc2371e362b700f4\nI\n\u0019stock_management/tests.py\u0012,e/6/e647b661c076f7b25ced4c715ea9c9e135ceb1bc\n<\n\fcrm/tests.py\u0012,e/d/edd82206712d93edccbb93d07ebe9f2972c575e8\n<\n\fcrm/admin.py\u0012,e/e/eecaec416f483f5dc34225d3d33e315546ea6fad\n@\n\u0010requirements.txt\u0012,1/9/19359a61ae2446b51b549167b014da2fcf265768\nC\n\u0013auth_module/apps.py\u0012,a/d/ad90dd7ea4aab818ed8e71c8bee169b4311c718a\nD\n\u0014auth_module/views.py\u0012,5/1/51adbe817d9adeed0b657f9d1f51540aec6f5c0a\nC\n\u0013backend/settings.py\u0012,e/3/e3b66993770b8bd17727389114408abe2710d4f6\nJ\n\u001Astock_management/models.py\u0012,6/2/62361466e69bcb03c64af6c56afd53b0a28aa892\nD\n\u0014auth_module/tests.py\u0012,6/7/67f3a346e6d642c29950494dc412ecdf3186c7c9\nE\n\u0015auth_module/models.py\u0012,1/a/1a1b9c1cd20e92033586640f036b53d59e4466c9\nG\n\u0017auth_module/services.py\u0012,a/9/a9796ce208fcd2853957504c106d119b7d26b957\n<\n\fcrm/views.py\u0012,b/6/b6296b3ea1479edb29e44b64ae39f6586328b599\nC\n\u0013ecommerce/models.py\u0012,b/8/b8b73344c1e806d65505fc3cb0ee8a24fc6f523e\nB\n\u0012common/services.py\u0012,1/3/13442ff2c318f6c4daec6494e860f32f8de076cf\nI\n\u0019stock_management/views.py\u0012,3/f/3f8e2abb50a95ecb7fa85ebb904b61b8c2f39003\n?\n\u000Fbackend/urls.py\u0012,e/8/e86ee5a9c15adf9e0f1eef0379032fc6cd65bd41\n=\n\rcrm/models.py\u0012,d/5/d5e8c8f6fb49f71ac683643a89cba8f1ee709e3d\n?\n\u000Fcommon/views.py\u0012,a/2/a2027c4c3af278934dafdb4a641e3f65e648e9d1\nF\n\u0016common/repositories.py\u0012,0/b/0bf8f17c16d32aa550fc5bcd9e35d381eef009b3\nL\n\u001Cstock_management/services.py\u0012,9/f/9f865b87488f50a77d0620d5b589da8154522635\n:\n\n.gitignore\u0012,a/5/a5cc2925ca8258af241be7e5b0381edf30266302
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/sonarlint/issuestore/index.pb b/.idea/sonarlint/issuestore/index.pb
--- a/.idea/sonarlint/issuestore/index.pb	
+++ b/.idea/sonarlint/issuestore/index.pb	
@@ -1,49 +1,30 @@
 
 ;
 crm/apps.py,d/0/d0e678652a66dec0145a11a4c2b2e2a1181436a4
-?
-common/tests.py,5/9/591ae9cb7b67faf9b030b21fcc2371e362b700f4
 I
 stock_management/tests.py,e/6/e647b661c076f7b25ced4c715ea9c9e135ceb1bc
 <
-crm/tests.py,e/d/edd82206712d93edccbb93d07ebe9f2972c575e8
-<
 crm/admin.py,e/e/eecaec416f483f5dc34225d3d33e315546ea6fad
 @
 requirements.txt,1/9/19359a61ae2446b51b549167b014da2fcf265768
 C
 auth_module/apps.py,a/d/ad90dd7ea4aab818ed8e71c8bee169b4311c718a
-D
-auth_module/views.py,5/1/51adbe817d9adeed0b657f9d1f51540aec6f5c0a
-C
-backend/settings.py,e/3/e3b66993770b8bd17727389114408abe2710d4f6
 J
 stock_management/models.py,6/2/62361466e69bcb03c64af6c56afd53b0a28aa892
+L
+stock_management/services.py,9/f/9f865b87488f50a77d0620d5b589da8154522635
+:
+
+.gitignore,a/5/a5cc2925ca8258af241be7e5b0381edf30266302
 D
-auth_module/tests.py,6/7/67f3a346e6d642c29950494dc412ecdf3186c7c9
-E
-auth_module/models.py,1/a/1a1b9c1cd20e92033586640f036b53d59e4466c9
-G
-auth_module/services.py,a/9/a9796ce208fcd2853957504c106d119b7d26b957
-<
-crm/views.py,b/6/b6296b3ea1479edb29e44b64ae39f6586328b599
-C
-ecommerce/models.py,b/8/b8b73344c1e806d65505fc3cb0ee8a24fc6f523e
+auth_module/admin.py,8/a/8aec7d4b1138f6d9156cb756775d72d72de618fe
+N
+crm/migrations/0001_initial.py,d/9/d98382f31fcb3169df9a9378eb81d81fc08d1bd1
+?
+common/views.py,a/2/a2027c4c3af278934dafdb4a641e3f65e648e9d1
 B
 common/services.py,1/3/13442ff2c318f6c4daec6494e860f32f8de076cf
 I
 stock_management/views.py,3/f/3f8e2abb50a95ecb7fa85ebb904b61b8c2f39003
-?
-backend/urls.py,e/8/e86ee5a9c15adf9e0f1eef0379032fc6cd65bd41
-=
-
-crm/models.py,d/5/d5e8c8f6fb49f71ac683643a89cba8f1ee709e3d
-?
-common/views.py,a/2/a2027c4c3af278934dafdb4a641e3f65e648e9d1
-F
-common/repositories.py,0/b/0bf8f17c16d32aa550fc5bcd9e35d381eef009b3
-L
-stock_management/services.py,9/f/9f865b87488f50a77d0620d5b589da8154522635
-:
-
-.gitignore,a/5/a5cc2925ca8258af241be7e5b0381edf30266302
\ No newline at end of file
+<
+crm/tests.py,e/d/edd82206712d93edccbb93d07ebe9f2972c575e8
\ No newline at end of file
Index: crm/services.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/crm/services.py b/crm/services.py
new file mode 100644
--- /dev/null	
+++ b/crm/services.py	
@@ -0,0 +1,59 @@
+from common.repositories import Repository
+from common.services import Service
+from django.contrib.auth.models import User
+
+from crm.models import CustomerProfile
+
+USER_FIELDS = {
+    'username': {'type': 'string', 'required': True},
+    'first_name': {'type': 'string', 'required': True},
+    'last_name': {'type': 'string', 'required': True},
+    'email': {'type': 'string', 'required': True},
+    'password': {'type': 'string', 'required': True}
+}
+
+CUSTOMER_FIELDS = {
+    'user': {'type': 'foreign_key', 'required': True},
+    'facebook': {'type': 'string', 'required': False},
+    'google': {'type': 'string', 'required': False},
+    'phone': {'type': 'string', 'required': True},
+    'gender': {'type': 'text', 'required': True}
+}
+
+
+class CustomerService(Service):
+
+    def __init__(self, repository=Repository(model=User), fields=None):
+        if fields is None:
+            fields = USER_FIELDS
+
+        super().__init__(repository, fields)
+        self.fields.update(CUSTOMER_FIELDS)
+        self.customer_repository = Repository(model=CustomerProfile)
+
+    def create(self, data: dict):
+        try:
+            User.objects.get(username=data.get('username'))
+            raise ValueError('user found with given username')
+        except User.DoesNotExist:
+            try:
+                User.objects.get(email=data.get('email'))
+                raise ValueError('user found with given email')
+            except User.DoesNotExist:
+                self.verify_required_data(data)
+                user = User.objects.create(
+                    username=data.get('username'),
+                    first_name=data.get('first_name'),
+                    last_name=data.get('last_name'),
+                    email=data.get('email')
+                )
+                user.set_password(raw_password=data.get('password'))
+                user.save()
+                self.customer_repository.create({
+                    'user': user,
+                    'facebook': data.get('facebook'),
+                    'google': data.get('google'),
+                    'phone': data.get('phone'),
+                    'gender': data.get('gender')
+                })
+                return user
